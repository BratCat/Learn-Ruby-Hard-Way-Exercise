require './dict.rb'

# create a mapping of countries in Europe
country = Dict.new()
Dict.set(country, 'Albania', 'AL')
Dict.set(country, 'Andorra', 'AD')
Dict.set(country, 'Armenia', 'AM')
Dict.set(country, 'Austria', 'AT')
Dict.set(country, 'Azerbaijan', 'AZ')
Dict.set(country, 'Belarus', 'BY')
Dict.set(country, 'Belgium', 'BE')
Dict.set(country, 'Bosnia', 'BA')
Dict.set(country, 'Bulgaria', 'BG')
Dict.set(country, 'Croatia', 'HR')
Dict.set(country, 'Cyprus', 'CY')
Dict.set(country, 'Czech Republic', 'CZ')
Dict.set(country, 'Denmark', 'DK')
Dict.set(country, 'Estonia', ' EE')
Dict.set(country, 'Finland', 'FI')
Dict.set(country, 'France', 'FA')
Dict.set(country, 'Georgia', 'GE')
Dict.set(country, 'Germany', 'DE')
Dict.set(country, 'Greece', 'GR')
Dict.set(country, 'Hungary', 'HU')
Dict.set(country, 'Iceland', 'IS')
Dict.set(country, 'Ireland', 'IE')
Dict.set(country, 'Italy', 'IT')
Dict.set(country, 'Kazakhstan', 'KAZ')
Dict.set(country, 'Kosovo', 'XK')
Dict.set(country, 'Latvia', 'LV')
Dict.set(country, 'Liechtenstein', 'LI')
Dict.set(country, 'Lithuania', 'LT')
Dict.set(country, 'Luxembourg', 'LU')
Dict.set(country, 'Macedonia', 'MK')
Dict.set(country, 'Malta', 'MT')
Dict.set(country, 'Moldova', 'MDA')
Dict.set(country, 'Monaco', 'MC')
Dict.set(country, 'Montenegro', 'ME')
Dict.set(country, 'Netherlands', 'NL')
Dict.set(country, 'Norway', 'NO')
Dict.set(country, 'Poland', 'PO')
Dict.set(country, 'Portugal', 'PT')
Dict.set(country, 'Romania', 'RO')
Dict.set(country, 'Russia', 'RU')
Dict.set(country, 'San Marino', 'SM')
Dict.set(country, 'Serbia', 'RS')
Dict.set(country, 'Slovakia', 'SK')
Dict.set(country, 'Slovenia', 'SI')
Dict.set(country, 'Sweden', 'SE')
Dict.set(country, 'Switzerland', 'CH')
Dict.set(country, 'Turkey', 'TR')
Dict.set(country, 'Ukraine', 'UA')
Dict.set(country, 'United Kingdom', 'UK')
Dict.set(country, 'Vatican City', 'VA')

# create a set of countries with cities in them
cities = Dict.new()
Dict.set(cities, 'Albania', 'Tirana')
Dict.set(cities, 'Andorra', 'Andorra la Vella')
Dict.set(cities, 'Armenia', 'Yerevan')
Dict.set(cities, 'Austria', 'Vienna')
Dict.set(cities, 'Azerbaijan', 'Baku')
Dict.set(cities, 'Belarus', 'Minsk')
Dict.set(cities, 'Belgium', 'Brussels')
Dict.set(cities, 'Bosnia', 'Sarajevo')
Dict.set(cities, 'Bulgaria', 'Sofia')
Dict.set(cities, 'Croatia', 'Zagreb')
Dict.set(cities, 'Cyprus', 'Nicosia')
Dict.set(cities, 'Czech Republic', 'Prague')
Dict.set(cities, 'Denmark', 'Copenhagen')
Dict.set(cities, 'Estonia', 'Talinn')
Dict.set(cities, 'Finland', 'Helsinki')
Dict.set(cities, 'France', 'Paris')
Dict.set(cities, 'Georgia', 'Tbilisi')
Dict.set(cities, 'Germany', 'Berlin')
Dict.set(cities, 'Greece', 'Athens')
Dict.set(cities, 'Hungary', 'Budapest')
Dict.set(cities, 'Iceland', 'Reykjavik')
Dict.set(cities, 'Ireland', 'Dublin')
Dict.set(cities, 'Italy', 'Rome')
Dict.set(cities, 'Kazakhstan', 'Astana')
Dict.set(cities, 'Kosovo', 'Pristina')
Dict.set(cities, 'Latvia', 'Riga')
Dict.set(cities, 'Liechtenstein', 'Vaduz')
Dict.set(cities, 'Lithuania', 'Vilnius')
Dict.set(cities, 'Luxembourg', 'Luxembourg')
Dict.set(cities, 'Macedonia', 'Skopje')
Dict.set(cities, 'Malta', 'Valletta')
Dict.set(cities, 'Moldova', 'Chisinau')
Dict.set(cities, 'Monaco', 'Monaco')
Dict.set(cities, 'Montenegro', 'Pogorica')
Dict.set(cities, 'Netherlands', 'Amsterdam')
Dict.set(cities, 'Norway', 'Oslo')
Dict.set(cities, 'Poland', 'Warsaw')
Dict.set(cities, 'Portugal', 'Lisbon')
Dict.set(cities, 'Romania', 'Bucharest')
Dict.set(cities, 'Russia', 'Moscow')
Dict.set(cities, 'San Marino', 'San Marino')
Dict.set(cities, 'Serbia', 'Belgrade')
Dict.set(cities, 'Slovakia', 'Bratislava')
Dict.set(cities, 'Slovania', 'Ljubljana')
Dict.set(cities, 'Spain', 'Madrid')
Dict.set(cities, 'Sweden', 'Stockholm')
Dict.set(cities, 'Switzerland', 'Bern')
Dict.set(cities, 'Turkey', 'Ankara')
Dict.set(cities, 'Ukraine', 'Kyiv')
Dict.set(cities, 'United Kingdom', 'London')
Dict.set(cities, 'Vatican City', 'Vatican City')

# puts every state abbreviation
puts '-' * 10
Dict.list(country)

# puts every city in state
puts '-' * 10
Dict.list(cities)


